import asyncio
import traceback
from datetime import datetime

from pyrogram.errors import FloodWait


async def send_to_user(message, target, message_text, pool, app):
    try:
        async with pool.acquire() as conn:
            start_time = datetime.now()
            print(f"\n{'-' * 50}")
            print(f"üöÄ –ó–ê–ü–£–°–ö –†–ê–°–°–´–õ–ö–ò [{start_time.strftime('%H:%M:%S')}]")
            print(f"‚ñ™ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {'–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' if target == '1' else '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'}")
            print(f"‚ñ™ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text[:50]}...")
            print(f"{'-' * 50}\n")

            if target == '1':
                users = await conn.fetch("SELECT * FROM clients")
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ")
            else:
                query = "SELECT * FROM clients WHERE message_to_client IS NULL"
                users = await conn.fetch(query)
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(users)} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            if not users:
                print("‚õî –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                await message.reply("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                return

            total = len(users)
            success = 0
            updated_users = 0
            errors = []

            progress_msg = await message.reply(f"üöÄ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            print(f"\nüîπ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            for idx, user in enumerate(users, 1):
                current_time = datetime.now().strftime("%H:%M:%S")
                user_info = f"ID: {user['user_id']}" + (f" (@{user['username']})" if user['username'] else "")

                try:
                    print(f"\n[{current_time}] ‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}")

                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    tg_user = await app.get_users(user['user_id'])
                    current_username = tg_user.username

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username
                    if current_username != user['username']:
                        print(f"[{current_time}] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username –¥–ª—è {user['user_id']}: "
                              f"'{user['username']}' ‚Üí '{current_username}'")
                        await conn.execute(
                            "UPDATE clients SET username = $1 WHERE user_id = $2",
                            current_username, user['user_id']
                        )
                        updated_users += 1

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    print(f"[{current_time}] üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_info}")
                    await app.send_message(user['user_id'], message_text)
                    success += 1
                    print(f"[{current_time}] ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    await asyncio.sleep(3)

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    await conn.execute(
                        "UPDATE clients SET message_to_client = $1 WHERE user_id = $2",
                        message_text, user['user_id']
                    )
                    print(f"[{current_time}] üìù –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏")

                except FloodWait as e:
                    print(f"\n[{current_time}] ‚ö†Ô∏è FloodWait: –û–∂–∏–¥–∞–Ω–∏–µ {e.value} —Å–µ–∫")
                    await asyncio.sleep(e.value + 5)

                    if current_username:
                        print(f"[{current_time}] üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ username @{current_username}")
                        try:
                            await app.send_message(current_username, message_text)
                            success += 1
                            print(f"[{current_time}] ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
                        except Exception as e:
                            error_msg = f"[{current_time}] ‚õî –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞: {str(e)}"
                            errors.append(error_msg)
                            print(error_msg)

                except Exception as e:
                    error_msg = f"[{current_time}] ‚õî –û—à–∏–±–∫–∞: {str(e)}"
                    if "Username not found" in str(e):
                        print(f"[{current_time}] üóë Username —É–¥–∞–ª–µ–Ω –¥–ª—è {user['user_id']}")
                        await conn.execute(
                            "UPDATE clients SET username = NULL WHERE user_id = $1",
                            user['user_id']
                        )
                    errors.append(error_msg)
                    print(error_msg)

                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if idx % 10 == 0:
                    progress = (
                        f"\n{'-' * 30}\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {idx}/{total}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_users}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}\n"
                        f"{'-' * 30}"
                    )
                    await progress_msg.edit_text(progress.split('\n')[1])
                    print(progress)

            # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            end_time = datetime.now()
            duration = end_time - start_time
            final_report = (
                f"\n{'=' * 50}\n"
                f"üèÅ –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê [{end_time.strftime('%H:%M:%S')}]\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration.total_seconds():.2f} —Å–µ–∫\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {success}\n"
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_users}\n"
                f"‚õî –û—à–∏–±–æ–∫: {len(errors)}\n"
                f"{'=' * 50}"
            )
            print(final_report)

            if errors:
                print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫:")
                for error in errors[-5:]:
                    print(f"‚Ä¢ {error}")

            await message.reply(
                f"üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_users}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {len(errors)}\n"
                f"‚Ä¢ –í—Ä–µ–º—è: {duration.total_seconds():.2f} —Å–µ–∫"
            )

    except Exception as e:
        error_msg = f"\n{'!' * 50}\n‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}\n{'!' * 50}"
        print(error_msg)
        traceback.print_exc()
        await message.reply(error_msg)