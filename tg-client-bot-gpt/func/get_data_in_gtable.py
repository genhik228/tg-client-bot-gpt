import asyncio
import pandas as pd
import openai
import httpx
from pyrogram.errors import FloodWait

from config import SPREADSHEET_ID, GID, PROXY_SETTINGS, OPENAI_API_KEY

async def get_tg_id(app, username: str) -> int:
    """–ü–æ–ª—É—á–∞–µ–º tg_id —á–µ—Ä–µ–∑ Pyrogram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    try:
        user = await app.get_users(username)
        return user.id
    except FloodWait as e:
        print(f"–û–∂–∏–¥–∞–µ–º {e.value} —Å–µ–∫—É–Ω–¥ –∏–∑-–∑–∞ FloodWait")
        await asyncio.sleep(e.value)
        return await get_tg_id(username)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –¥–ª—è @{username}: {str(e)}")
        return None

PRODUCT_DESCRIPTION = """üß© –û–ø–∏—Å–∞–Ω–∏–µ Sboard –¥–ª—è –ø—Ä–æ–º—Ç–∞
Sboard ‚Äî —ç—Ç–æ —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –æ–Ω–ª–∞–π–Ω-–¥–æ—Å–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Miro —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–º–ø–æ—Ä—Ç–∞ –¥–æ—Å–æ–∫ –∏–∑ –ú–∏—Ä–æ, –æ–ø–ª–∞—Ç–æ–π –≤ —Ä—É–±–ª—è—Ö –∏ on-premise —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥, agile-–∫–æ—É—á–µ–π, scrum-–º–∞—Å—Ç–µ—Ä–æ–≤, IT-–¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –æ–±—É—á–µ–Ω–∏—é.

Sboard –ø–æ–∑–≤–æ–ª—è–µ—Ç:

–ø—Ä–æ–≤–æ–¥–∏—Ç—å –º–∏—Ç–∏–Ω–≥–∏, —Ä–µ—Ç—Ä–æ –∏ —Ñ–∞—Å–∏–ª–∏—Ç–∞—Ü–∏–∏;

–≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã, CJM, —Ä–æ–∞–¥–º–∞–ø—ã;

–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã, —Ç–∞–π–º–µ—Ä—ã, Agile-–∏–≥—Ä—ã;

–±—ã—Å—Ç—Ä–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫–∏ –∏–∑ Miro (—Å–æ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –¥–∞–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ);

—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–±–ª–∞–∫–µ –∏–ª–∏ –Ω–∞ —Å–≤–æ–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ (on-premise).

–õ–∏—Ü–µ–Ω–∑–∏–∏ –±—ã–≤–∞—é—Ç –≥–æ–¥–æ–≤—ã–µ –∏ –±–µ—Å—Å—Ä–æ—á–Ω—ã–µ"""

def get_openai_client():
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–∫—Å–∏
    transport = None
    if PROXY_SETTINGS["https"]:
        transport = httpx.HTTPTransport(
            proxy=PROXY_SETTINGS["https"],
            retries=3
        )

    proxy_client = httpx.Client(
        transport=transport,
        timeout=30
    ) if transport else httpx.Client(timeout=30)


    return openai.OpenAI(
        api_key=OPENAI_API_KEY,
        http_client=proxy_client
    )

def generate_greeting(user_message):
    try:
        client = get_openai_client()
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": f"""You are Anya from Sboard.online ‚Äî a service for collaborative work and team communication.  
Write a short Telegram message (1‚Äì2 sentences, in Russian) for a person who is interested in: "{user_message}".  
Include an introduction like ‚ÄúI‚Äôm Anya from Sboard.online‚Äù, but vary the wording and placement each time (start, middle, or end).  
Keep the tone human, informal and friendly ‚Äî like a person starting a light conversation.  
Mention {PRODUCT_DESCRIPTION} briefly and naturally.  
End the message with a soft, non-pushy question to invite a reply.  
Do not use emojis or formal sales phrases."""},
                {"role": "user", "content": "–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
            ],
            temperature=0.7,
            max_tokens=150
        )
        return response.choices[0].message.content.strip()

    except httpx.ProxyError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏: {e}")
        return None
    except openai.APIError as e:
        print(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
        return None
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None


# def generate_greeting(mes):
#         return 'new 2'

async def process_row(app, row):
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if pd.notna(row['send_message']) and row['send_message']:
            print(f'–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {row["username"]} (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)')
            return row

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tg_id
        if pd.isna(row['tg_id']):
            username = row['username']
            if pd.notna(username) and username.strip() != '':
                tg_id = await get_tg_id(app, username)
                if tg_id is None:
                    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É')
                    return None  # –ü–æ–º–µ—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                row['tg_id'] = tg_id
            else:
                print(f'–ù–µ —É–∫–∞–∑–∞–Ω username –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row.name}, —É–¥–∞–ª—è–µ–º')
                return None

        if pd.notna(row['descriptions']):
            # generated_message = generate_greeting(row['descriptions'])  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generated_message = 'new mess'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            if generated_message:
                row['send_message'] = generated_message
        return row
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {row['username']}: {str(e)}")
        return None  # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def process_dataframe_async(app, df):
    tasks = [process_row(app, row.copy()) for _, row in df.iterrows()]
    results = await asyncio.gather(*tasks)
    return pd.DataFrame([r for r in results if r is not None])

async def get_data_in_gtable(app):
    url = f'https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/gviz/tq?tqx=out:csv&gid={GID}'
    loop = asyncio.get_event_loop()
    df = await loop.run_in_executor(None, pd.read_csv, url)

    rename_dict = {
        '–ò–º—è': 'first_name',
        '–§–∞–º–∏–ª–∏—è': 'last_name',
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å': 'role',
        '–∫–æ–º–ø–∞–Ω–∏—è': 'company_name',
        'tg': 'username',
        '–æ–ø–∏—Å–∞–Ω–∏–µ': 'descriptions',
        '—Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ 1 —Å–æ–æ–±—â–µ–Ω–∏—è': 'send_message',
        '—Ñ–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞': 'answer_message'
    }
    df = df.rename(columns=rename_dict)
    required_columns = [
        'tg_id',
        'username',
        'first_name',
        'last_name',
        'phone_number',
        'email',
        'role',
        'company_name',
        'descriptions',
        'send_message',
        'answer_message'
    ]
    df = df.reindex(columns=required_columns)
    processed_df = await process_dataframe_async(app, df)
    processed_df['send_message'] = processed_df['send_message'].fillna(False)
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(df)}")
    print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_df)}")
    print(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df) - len(processed_df)}")

    return processed_df
