import openai
import httpx
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
PROXY_SETTINGS = {
    "http": os.getenv("HTTP_PROXY"),
    "https": os.getenv("HTTPS_PROXY")
}


def get_openai_client():
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–∫—Å–∏
    transport = None
    if PROXY_SETTINGS["https"]:
        transport = httpx.HTTPTransport(
            proxy=PROXY_SETTINGS["https"],
            retries=3
        )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–∫—Å–∏)
    proxy_client = httpx.Client(
        transport=transport,
        timeout=30
    ) if transport else httpx.Client(timeout=30)

    return openai.OpenAI(
        api_key=os.getenv("OPENAI_API_KEY"),
        http_client=proxy_client
    )
PRODUCT_DESCRIPTION = """üß© –û–ø–∏—Å–∞–Ω–∏–µ Sboard –¥–ª—è –ø—Ä–æ–º—Ç–∞
Sboard ‚Äî —ç—Ç–æ —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –æ–Ω–ª–∞–π–Ω-–¥–æ—Å–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Miro —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–º–ø–æ—Ä—Ç–∞ –¥–æ—Å–æ–∫ –∏–∑ –ú–∏—Ä–æ, –æ–ø–ª–∞—Ç–æ–π –≤ —Ä—É–±–ª—è—Ö –∏ on-premise —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥, agile-–∫–æ—É—á–µ–π, scrum-–º–∞—Å—Ç–µ—Ä–æ–≤, IT-–¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –æ–±—É—á–µ–Ω–∏—é.

Sboard –ø–æ–∑–≤–æ–ª—è–µ—Ç:

–ø—Ä–æ–≤–æ–¥–∏—Ç—å –º–∏—Ç–∏–Ω–≥–∏, —Ä–µ—Ç—Ä–æ –∏ —Ñ–∞—Å–∏–ª–∏—Ç–∞—Ü–∏–∏;

–≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã, CJM, —Ä–æ–∞–¥–º–∞–ø—ã;

–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã, —Ç–∞–π–º–µ—Ä—ã, Agile-–∏–≥—Ä—ã;

–±—ã—Å—Ç—Ä–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫–∏ –∏–∑ Miro (—Å–æ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –¥–∞–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ);

—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–±–ª–∞–∫–µ –∏–ª–∏ –Ω–∞ —Å–≤–æ–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ (on-premise).

–õ–∏—Ü–µ–Ω–∑–∏–∏ –±—ã–≤–∞—é—Ç –≥–æ–¥–æ–≤—ã–µ –∏ –±–µ—Å—Å—Ä–æ—á–Ω—ã–µ"""
def generate_greeting(user_message):
    try:
        client = get_openai_client()
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": f"""
                            –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ: {PRODUCT_DESCRIPTION}
                            –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}
                            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
                            - –î–ª–∏–Ω–∞ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
                            - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            - –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ 1-2 –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
                            - –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥—Ä—É–∂–µ—Å–∫–∏–π —Ç–æ–Ω
                            """},
                {"role": "user", "content": "–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
            ],
            temperature=0.7,
            max_tokens=150
        )
        return response.choices[0].message.content.strip()

    except httpx.ProxyError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏: {e}")
        return None
    except openai.APIError as e:
        print(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
        return None
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
user_message = "–æ–ø—ã—Ç–æ–º –≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–∏, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á"
print(generate_greeting(user_message))
