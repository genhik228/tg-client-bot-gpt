from datetime import datetime
import os
import asyncpg
import asyncio
import logging
from pyrogram import Client, filters, idle
from pyrogram.types import Message
from pyrogram.errors import FloodWait
import traceback
from config import POSTGRES_CONFIG, API_ID, API_HASH, ADMIN_ID, DATABASE_URL
from db import create_tables, save_message_users, save_media
from func.get_answer_for_client import update_answer
from func.get_data_in_gtable import get_data_in_gtable
import log_print as pr
from func.send_users_message import send_messages
import math
from asyncpg.exceptions import DataError

from asyncpg.exceptions import CannotConnectNowError


pool = None
app = None

logging.basicConfig(
    level=os.getenv('LOG_LEVEL', 'INFO'),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


# async def process_missing_ids(df: pd.DataFrame, delay: int = 1) -> pd.DataFrame:
#     missing_ids = df[df['tg_id'].isna()]
#     for idx, row in missing_ids.iterrows():
#         username = row['username']
#         if pd.notna(username) and username.strip() != '':
#             tg_id = await get_tg_id(username)
#             df.at[idx, 'tg_id'] = int(tg_id)
#             await asyncio.sleep(delay)
#     return df.dropna(subset=['tg_id'])


def clean_value(value, max_length=None):
    """–û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π"""
    if isinstance(value, float):
        if math.isnan(value):
            return None
        value = str(int(value)) if value.is_integer() else str(value)

    if value is None:
        return None

    # –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    str_value = str(value)
    if max_length and len(str_value) > max_length:
        return str_value[:max_length]
    return str_value


async def save_users(users_dict, conn):
    if not users_dict:
        pr.print_warning("–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return "–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
    try:
        processed_users = {}
        for k, v in users_dict.items():
            try:
                tg_id = int(float(k)) if isinstance(k, (float, str)) else int(k)
                processed_users[tg_id] = {
                    'tg_id': tg_id,
                    **{key: clean_value(val) for key, val in v.items()}
                }
            except (ValueError, TypeError) as e:
                pr.print_error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ tg_id {k}: {e}")
                continue

        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        existing = await conn.fetch(
            "SELECT tg_id, send_message FROM users WHERE tg_id = ANY($1::bigint[])",
            list(processed_users.keys())
        )
        sent_ids = {rec['tg_id'] for rec in existing if rec['send_message']}
        new_users = []
        for tg_id, u in processed_users.items():
            if tg_id in sent_ids:
                pr.print_step(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue
            try:
                user_tuple = (
                                    tg_id,
                                    clean_value(u.get('username')),
                                    clean_value(u.get('first_name')),
                                    clean_value(u.get('last_name')),
                                    clean_value(u.get('phone_number')),
                                    clean_value(u.get('email')),
                                    clean_value(u.get('role')),
                                    clean_value(u.get('company_name')),
                                    clean_value(u.get('descriptions')),
                                    clean_value(u.get('send_message')),  # –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
                                    None  # answer_message
                                    )
                new_users.append(user_tuple)
            except Exception as e:
                pr.print_error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ {tg_id}: {e}")
                continue

        if not new_users:
            pr.print_warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"

        # –ü–∞–∫–µ—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            await conn.executemany('''
                INSERT INTO users (
                    tg_id, username, first_name, last_name, 
                    phone_number, email, role, company_name, 
                    descriptions, send_message, answer_message
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
                ON CONFLICT (tg_id) DO UPDATE SET
                    username = EXCLUDED.username,
                    first_name = EXCLUDED.first_name,
                    last_name = EXCLUDED.last_name,
                    phone_number = EXCLUDED.phone_number,
                    email = EXCLUDED.email,
                    role = EXCLUDED.role,
                    company_name = EXCLUDED.company_name,
                    descriptions = EXCLUDED.descriptions,
                    send_message = EXCLUDED.send_message
            ''', new_users)
            pr.print_success(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(new_users)} –∑–∞–ø–∏—Å–µ–π")
            return f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(new_users)} –∑–∞–ø–∏—Å–µ–π"
        except DataError as e:
            pr.print_error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for i, row in enumerate(new_users):
                try:
                    await conn.execute('''
                        INSERT INTO users 
                        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
                    ''', row)
                except Exception as single_error:
                    pr.print_error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}: {single_error}")

    except Exception as e:
        pr.print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

user_states = {}


async def init_db():
    max_retries = 5
    retry_delay = 5  # seconds

    for attempt in range(max_retries):
        try:
            print('DATABASE_URL', DATABASE_URL)
            pool = await asyncpg.create_pool(DATABASE_URL)
            async with pool.acquire() as conn:
                await create_tables(conn)
            return pool
        except (CannotConnectNowError, ConnectionRefusedError) as e:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {str(e)}")
            await asyncio.sleep(retry_delay)

    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫")


async def main():
    global pool, app
    pr.print_header("–ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê TELEGRAM")
    print(DATABASE_URL)
    print('123')
    menu_text = (
        "**üèÅ –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø**\n\n"
        "1. üï∑Ô∏è –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "2. üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "3. üìä  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É (1-6):"
    )
    try:
        # pool = await asyncpg.create_pool(**POSTGRES_CONFIG)
        print(DATABASE_URL)
        # pool = await asyncpg.create_pool(DATABASE_URL)
        await init_db()
        async with pool.acquire() as conn:
            await create_tables(conn)

        app = Client(
            name="session",
            api_id=API_ID,
            api_hash=API_HASH,
            workdir="sessions"
        )
        @app.on_message(filters.private)
        async def log_all_messages(client: Client, message: Message):
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(f'================= {current_time} =========================\n–¢–µ–∫—Å—Ç: {message.text}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} {message.from_user.username}')
            try:
                async with pool.acquire() as conn:
                    if message.from_user.id == ADMIN_ID and not message.from_user.is_bot:
                        if message.text == '1':
                            df = await get_data_in_gtable(app)
                            users_dict = {row['tg_id']: row.to_dict() for _, row in df.iterrows()}
                            messages_save_users = await save_users(users_dict, conn)
                            await app.send_message(chat_id=ADMIN_ID, text=messages_save_users)
                        elif message.text == '2':
                            message_s = await send_messages(app, conn)
                            await app.send_message(chat_id=ADMIN_ID, text=message_s)
                        elif message.text == '3':
                            await update_answer(app, conn)
                            await app.send_message(chat_id=ADMIN_ID, text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                        else:
                            print(f'===== –ê–¥–º–∏–Ω  {current_time} ===========\n–¢–µ–∫—Å—Ç: {message.text}')
                            await save_message_users(conn, message, direction='out')
                            if message.media:
                                await save_media(client, message, conn, message.caption or "")
                        await app.send_message(chat_id=ADMIN_ID, text=menu_text)

                    else:
                        await save_message_users(conn, message, direction='in')
                        if message.media:
                            await save_media(client, message, conn, message.caption or "")
            except FloodWait as e:
                wait_time = e.value + 5
                pr.print_warning(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(wait_time)
                return await log_all_messages(client, message)
            except Exception as e:
                await message.reply(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                traceback.print_exc()

        await app.start()
        me = await app.get_me()
        pr.print_success(f"–ë–æ—Ç @{me.username} [ID:{me.id}] —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        try:
            await app.send_message(ADMIN_ID, "ü§ñ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é
            await app.send_message(chat_id=ADMIN_ID, text=menu_text)

        except Exception as e:
            pr.print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")
            pr.print_warning("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤–∞–º.")

        await idle()

    except Exception as e:
        pr.print_error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if pool:
            await pool.close()
        if app:
            await app.stop()
        pr.print_success("–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã")
        os._exit(0)  # –ü–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞

if __name__ == "__main__":
    asyncio.run(main())